/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => LinkKeeperPlugin
});
var import_obsidian4 = __toModule(require("obsidian"));

// modals.ts
var import_obsidian2 = __toModule(require("obsidian"));

// utils.ts
var import_obsidian = __toModule(require("obsidian"));
var noticeHandler = (msg) => new import_obsidian.Notice(msg);

// modals.ts
var AddLink = class extends import_obsidian2.Modal {
  constructor(app, linkUrl, onSubmit) {
    super(app);
    this.linkName = "";
    this.linkUrl = linkUrl;
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "Add Link", cls: "title" });
    new import_obsidian2.Setting(contentEl).setName("Link name").addText((text) => text.setValue(this.linkName).setPlaceholder("name").onChange((value) => {
      this.linkName = value;
    }));
    new import_obsidian2.Setting(contentEl).setName("Link url").addText((text) => text.setValue(this.linkUrl).setPlaceholder("url").onChange((value) => {
      this.linkUrl = value;
    }));
    new import_obsidian2.Setting(contentEl).addButton((btn) => btn.setButtonText("Add").setCta().onClick(() => {
      const { linkName, linkUrl } = this;
      if (!linkName.trim()) {
        noticeHandler("Link name is required!");
      } else if (!linkUrl.trim()) {
        noticeHandler("Link url is required!");
      } else {
        this.close();
        this.onSubmit(this.linkName, this.linkUrl);
      }
    }));
  }
  onClose() {
    this.contentEl.empty();
  }
};
var DeleteLink = class extends import_obsidian2.Modal {
  constructor(app, options, onDelete) {
    super(app);
    this.onDelete = onDelete;
    this.options = options;
    this.linkName = Object.keys(options)[0] || "";
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "Delete Link", cls: "title" });
    new import_obsidian2.Setting(contentEl).setName("Link name").addDropdown((dp) => dp.addOptions(this.options).onChange((value) => {
      this.linkName = value;
    }));
    new import_obsidian2.Setting(contentEl).addButton((btn) => btn.setButtonText("Delete").setCta().onClick(() => {
      const { linkName } = this;
      if (!linkName) {
        noticeHandler("Link name is required!");
      } else {
        this.close();
        this.onDelete(this.linkName);
      }
    }));
  }
  onClose() {
    this.contentEl.empty();
  }
};
var ListAllLinks = class extends import_obsidian2.Modal {
  constructor(app, options) {
    super(app);
    this.options = options;
  }
  createListItem(container, key, value, isLink = true) {
    const box = container.createEl("div", { cls: `list-item ${!isLink ? "list-item-header" : ""}` });
    box.createEl("div", { text: key });
    const linkBox = box.createEl("div");
    if (isLink) {
      linkBox.createEl("a", { text: value, href: value });
    } else {
      linkBox.createSpan({ text: value });
    }
  }
  renderList(key = "") {
    let options = this.options;
    if (key) {
      options = Object.keys(options).reduce((obj, item) => {
        if (item.includes(key))
          obj = __spreadProps(__spreadValues({}, obj), { [item]: options[item] });
        return obj;
      }, {});
    }
    const container = this.contentEl.createEl("div");
    this.createListItem(container, "Name", "Url", false);
    const listContainer = container.createEl("div", { cls: "list-container" });
    const keys = Object.keys(options);
    if (keys.length) {
      keys.forEach((key2) => {
        this.createListItem(listContainer, key2, options[key2]);
      });
    } else {
      listContainer.createEl("div", { text: "No results!", cls: "list-empty" });
    }
    return container;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "All Links", cls: "title" });
    let contentBox = null;
    new import_obsidian2.Setting(contentEl).setName("Search").addSearch((el) => {
      el.setPlaceholder("Input the link name...").onChange((val) => {
        contentBox.empty();
        contentBox = this.renderList(val);
      });
    });
    contentBox = this.renderList();
  }
  onClose() {
    this.contentEl.empty();
  }
};

// settings.ts
var import_obsidian3 = __toModule(require("obsidian"));
var LinkKeeperSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian3.Setting(containerEl).setName("Link Filepath").setDesc("The file where saves the links.").addText((text) => text.setPlaceholder("Enter the full filepath").setValue(this.plugin.settings.filepath).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.filepath = value;
      yield this.plugin.saveSettings();
    })));
  }
};

// main.ts
var import_promises = __toModule(require("fs/promises"));
var DEFAULT_SETTINGS = {
  filepath: `${process.env.HOME}/etl.json`
};
var LinkKeeperPlugin = class extends import_obsidian4.Plugin {
  getLinks(cb) {
    return __async(this, null, function* () {
      try {
        const data = yield (0, import_promises.readFile)(this.settings.filepath, { encoding: "utf-8" });
        cb(JSON.parse(data || "{}"));
      } catch (err) {
        noticeHandler(err.message);
      }
    });
  }
  saveLink(data, message) {
    return __async(this, null, function* () {
      try {
        yield (0, import_promises.writeFile)(this.settings.filepath, JSON.stringify(data));
        noticeHandler(message);
      } catch (err) {
        noticeHandler(err.message);
      }
    });
  }
  onSubmit(name, url) {
    this.getLinks((data) => __async(this, null, function* () {
      if (Object.prototype.toString.call(data) === "[object Object]") {
        this.saveLink(__spreadProps(__spreadValues({}, data), { [name]: url }), "Add Link successfully!");
      } else {
        noticeHandler("Data format error! It must be a json object.");
      }
    }));
  }
  onDelete(name) {
    return __async(this, null, function* () {
      yield this.getLinks((data) => __async(this, null, function* () {
        delete data[name];
        this.saveLink(data, `Link named ${name} has been deleted!`);
      }));
    });
  }
  initModal(type, options) {
    switch (type) {
      case "addLink":
        return new AddLink(this.app, options.link, this.onSubmit.bind(this));
      case "deleteLink":
        return new DeleteLink(this.app, options, this.onDelete.bind(this));
      case "listLink":
        return new ListAllLinks(this.app, options);
      default:
        break;
    }
  }
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addSettingTab(new LinkKeeperSettingTab(this.app, this));
      this.addRibbonIcon("link", "List all links", () => {
        this.app.commands.commands["obsidian-link-keeper:list-links"].callback();
      });
      this.addCommand({
        id: "add-link",
        name: "Add link",
        editorCallback: (editor) => {
          const selection = editor.getSelection();
          this.initModal("addLink", { link: selection }).open();
        }
      });
      this.addCommand({
        id: "delete-link",
        name: "Delete link",
        callback: () => {
          this.getLinks((data) => __async(this, null, function* () {
            this.initModal("deleteLink", Object.keys(data).reduce((obj, key) => __spreadProps(__spreadValues({}, obj), {
              [key]: key
            }), {})).open();
          }));
        }
      });
      this.addCommand({
        id: "list-links",
        name: "List links",
        icon: "link",
        callback: () => {
          this.getLinks((data) => __async(this, null, function* () {
            this.initModal("listLink", data).open();
          }));
        }
      });
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = __spreadValues(__spreadValues({}, DEFAULT_SETTINGS), yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
